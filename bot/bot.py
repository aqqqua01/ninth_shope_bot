#!/usr/bin/env python3
"""
Simple Crypto Top-Up Telegram Bot
–ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
"""

import os
import json
import logging
import hashlib
import hmac
import asyncio
import base64
from datetime import datetime
from decimal import Decimal, ROUND_HALF_UP
from urllib.parse import parse_qsl

from telegram import Update, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')
FORWARD_CHAT_ID = os.getenv('FORWARD_CHAT_ID')
WEBAPP_URL = os.getenv('WEBAPP_URL')

# –ö—É—Ä—Å USDT –∫ —Ä—É–±–ª—é (–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –≤—Ä—É—á–Ω—É—é)
USDT_RATE = float(os.getenv('USDT_RATE', '95.0'))  # 1 USDT = 95 RUB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –ö–æ–º–∏—Å—Å–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
COMMISSION_PERCENT = float(os.getenv('COMMISSION_PERCENT', '15.0'))  # 15% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∫—É—Ä—Å–∞ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã)
current_usdt_rate = USDT_RATE

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

if not ADMIN_CHAT_ID:
    logger.error("ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

if not WEBAPP_URL:
    logger.warning("WEBAPP_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - WebApp –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç–∞")


def verify_webapp_data(init_data: str, bot_token: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö WebApp —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram
    """
    try:
        parsed_data = dict(parse_qsl(init_data))
        data_check_string_parts = []
        
        for key, value in sorted(parsed_data.items()):
            if key != 'hash':
                data_check_string_parts.append(f"{key}={value}")
        
        data_check_string = '\n'.join(data_check_string_parts)
        secret_key = hmac.new(b"WebAppData", bot_token.encode(), hashlib.sha256).digest()
        calculated_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()
        
        return calculated_hash == parsed_data.get('hash')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ WebApp –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def parse_amount(amount_str: str) -> Decimal:
    """
    –ü–∞—Ä—Å–∏—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    try:
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
        amount_str = amount_str.replace(',', '.')
        amount = Decimal(amount_str)
        
        if amount < 100:
            raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 100 –†–£–ë")
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        return amount.quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)
    except (ValueError, TypeError) as e:
        raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞: {e}")


def calculate_total_with_commission(base_amount: Decimal) -> Decimal:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –∫ –æ–ø–ª–∞—Ç–µ —Å –∫–æ–º–∏—Å—Å–∏–µ–π
    """
    commission_multiplier = Decimal('1') + (Decimal(str(COMMISSION_PERCENT)) / Decimal('100'))
    total = base_amount * commission_multiplier
    return total.quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)


def calculate_usdt_amount(rub_amount: Decimal) -> Decimal:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä—É–±–ª–∏ –≤ USDT –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É
    """
    global current_usdt_rate
    usdt_amount = rub_amount / Decimal(str(current_usdt_rate))
    return usdt_amount.quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        f"üí∞ –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É!\n\n"
        f"üìù –ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏ —Å—É–º–º—É - –º—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USDT\n"
        f"üîê –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞\n"
        f"‚ö° –ü–æ—Å–ª–µ –∑–∞—è–≤–∫–∏ —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä\n\n"
        f"üëá –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å WebApp –∫–Ω–æ–ø–∫–æ–π –µ—Å–ª–∏ URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    if WEBAPP_URL:
        keyboard = [
            [KeyboardButton(
                "üí∞ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", 
                web_app=WebAppInfo(url=WEBAPP_URL)
            )]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    else:
        welcome_message += "\n‚ö†Ô∏è WebApp –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        reply_markup = None
    
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
        "/admin - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "/setrate - –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å USDT (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)\n\n"
        f"üí° <b>–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑:</b>\n"
        f"1. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ'\n"
        f"2. –£–∫–∞–∂–∏ –ª–æ–≥–∏–Ω –∏ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö\n"
        f"3. –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∂–µ—Ç —Å—É–º–º—É –∫ –æ–ø–ª–∞—Ç–µ —Å –∫–æ–º–∏—Å—Å–∏–µ–π {COMMISSION_PERCENT}%\n"
        f"4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∑–∞–∫–∞–∑\n"
        f"5. –û–∂–∏–¥–∞–π –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º\n"
        f"6. –ü–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è - –ø–æ–ª—É—á–∏—à—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã\n"
        f"7. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω\n\n"
        f"üí∞ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (USDT)\n"
        f"üí± <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b> 1 USDT = {current_usdt_rate} –†–£–ë\n"
        f"üìà <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {COMMISSION_PERCENT}%\n"
        f"üíµ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</b> 100 –†–£–ë"
    )
    
    await update.message.reply_text(help_text, parse_mode='HTML')


async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start"
    )


async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    user = update.effective_user
    chat = update.effective_chat
    
    admin_info = (
        f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n"
        f"User ID: <code>{user.id}</code>\n"
        f"Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–ò–º—è: {user.full_name}\n\n"
        f"üí¨ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:</b>\n"
        f"Chat ID: <code>{chat.id}</code>\n"
        f"–¢–∏–ø —á–∞—Ç–∞: {chat.type}"
    )
    
    await update.message.reply_text(admin_info, parse_mode='HTML')


async def set_rate_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setrate –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ USDT"""
    global current_usdt_rate
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if str(update.effective_user.id) != ADMIN_CHAT_ID.lstrip('-'):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    if not context.args:
        await update.message.reply_text(
            f"üí± <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å USDT:</b> 1 USDT = {current_usdt_rate} –†–£–ë\n"
            f"üìà <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {COMMISSION_PERCENT}%\n\n"
            f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            f"<code>/setrate 95.5</code>",
            parse_mode='HTML'
        )
        return
    
    try:
        new_rate = float(context.args[0])
        if new_rate <= 0:
            raise ValueError("–ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
        old_rate = current_usdt_rate
        current_usdt_rate = new_rate
        
        await update.message.reply_text(
            f"‚úÖ <b>–ö—É—Ä—Å USDT –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"üìâ –°—Ç–∞—Ä—ã–π –∫—É—Ä—Å: 1 USDT = {old_rate} –†–£–ë\n"
            f"üìà –ù–æ–≤—ã–π –∫—É—Ä—Å: 1 USDT = {current_usdt_rate} –†–£–ë\n\n"
            f"üí° –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.",
            parse_mode='HTML'
        )
        
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {update.effective_user.id} –∏–∑–º–µ–Ω–∏–ª –∫—É—Ä—Å USDT —Å {old_rate} –Ω–∞ {current_usdt_rate}")
        
    except (ValueError, IndexError):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É—Ä—Å–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/setrate 95.5</code>",
            parse_mode='HTML'
        )


async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å—Ä–∞–∑—É –≤ –Ω–∞—á–∞–ª–µ
        user = update.effective_user
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        raw_data = update.message.web_app_data.data
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã —Å—ã—Ä—ã–µ WebApp –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {raw_data}")
        
        # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
        data = json.loads(update.message.web_app_data.data)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã WebApp –¥–∞–Ω–Ω—ã–µ –æ—Ç {user.full_name}: {data}")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        login = data.get('login', '').strip()
        if not login:
            await update.message.reply_text("‚ùå –õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        try:
            base_amount = parse_amount(str(data.get('amount', 0)))
            total_rub = calculate_total_with_commission(base_amount)
            total_usdt = calculate_usdt_amount(total_rub)
        except ValueError as e:
            await update.message.reply_text(f"‚ùå {e}")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ –∑–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        user_message = (
            f"üîÑ <b>–ó–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ</b>\n\n"
            f"üë§ –õ–æ–≥–∏–Ω: <code>{login}</code>\n"
            f"üí∞ –°—É–º–º–∞: {base_amount} –†–£–ë\n"
            f"üí≥ –ö –æ–ø–ª–∞—Ç–µ: <b>{total_rub} –†–£–ë</b> (—Å –∫–æ–º–∏—Å—Å–∏–µ–π {COMMISSION_PERCENT}%)\n"
            f"üíé –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç: <b>{total_usdt} USDT</b>\n\n"
            f"‚è≥ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è</b>\n"
            f"üì± –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞\n\n"
            f"üïê –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: –¥–æ 30 –º–∏–Ω—É—Ç"
        )
        
        await update.message.reply_text(
            user_message, 
            parse_mode='HTML'
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–æ–π  
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º base64 –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–Ω–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Å–∏–º–≤–æ–ª–∞–º–∏
        encoded_login = base64.b64encode(login.encode()).decode()
        
        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", 
                    callback_data=f"accept_{user.id}_{update.effective_chat.id}_{total_rub}_{encoded_login}"
                )
            ],
            [
                InlineKeyboardButton(
                    "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
                    callback_data=f"reject_{user.id}_{update.effective_chat.id}_{total_rub}_{encoded_login}"
                )
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        admin_message = (
            f"üîî <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó –ù–ê –ü–û–ü–û–õ–ù–ï–ù–ò–ï</b>\n\n"
            f"‚è∞ –í—Ä–µ–º—è: {timestamp}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (@{user.username or '–±–µ–∑ username'})\n"
            f"üÜî User ID: <code>{user.id}</code>\n"
            f"üí¨ Chat ID: <code>{update.effective_chat.id}</code>\n\n"
            f"üìã <b>–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:</b>\n"
            f"üë§ –õ–æ–≥–∏–Ω: <code>{login}</code>\n"
            f"üí∞ –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞: {base_amount} –†–£–ë\n"
            f"üí≥ –ö –æ–ø–ª–∞—Ç–µ: <b>{total_rub} –†–£–ë</b> (–∫–æ–º–∏—Å—Å–∏—è {COMMISSION_PERCENT}%)\n"
            f"üíé –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç: <b>{total_usdt} USDT</b>\n"
            f"üí± –ö—É—Ä—Å: 1 USDT = {current_usdt_rate} –†–£–ë\n\n"
            f"üìä <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
            f"<code>{json.dumps(data, ensure_ascii=False, indent=2)}</code>"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω —á–∞—Ç
        if ADMIN_CHAT_ID:
            try:
                await context.bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text=admin_message,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω —á–∞—Ç: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —á–∞—Ç –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if FORWARD_CHAT_ID:
            try:
                await context.bot.send_message(
                    chat_id=FORWARD_CHAT_ID,
                    text=admin_message,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —á–∞—Ç: {e}")
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} (–ª–æ–≥–∏–Ω: {login}): {base_amount} –†–£–ë -> {total_rub} –†–£–ë ({COMMISSION_PERCENT}%) = {total_usdt} USDT")
        
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ WebApp –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text(
            "‚ùå –£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


async def handle_accept_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑'"""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        parts = query.data.split('_')
        if len(parts) >= 5:
            _, user_id, chat_id, amount, encoded_login = parts[0], parts[1], parts[2], parts[3], parts[4]
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω
            try:
                login = base64.b64decode(encoded_login.encode()).decode()
            except:
                login = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –ª–æ–≥–∏–Ω–∞
            _, user_id, chat_id, amount = query.data.split('_', 3)
            login = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞
        accept_message = (
            f"‚úÖ <b>–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</b>\n\n"
            f"üë§ –õ–æ–≥–∏–Ω: <code>{login}</code>\n"
            f"üí≥ –ö –æ–ø–ª–∞—Ç–µ: {amount} –†–£–ë\n\n"
            f"üîê <b>–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä</b>\n"
            f"üíé –û–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n\n"
            f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Å–≤—è–∑–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
        )
        
        await context.bot.send_message(
            chat_id=int(chat_id),
            text=accept_message,
            parse_mode='HTML'
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—á–µ–Ω–æ" –¥–ª—è –∞–¥–º–∏–Ω–∞
        paid_keyboard = [
            [
                InlineKeyboardButton(
                    "üí∞ –û–ø–ª–∞—á–µ–Ω–æ", 
                    callback_data=f"paid_{user_id}_{chat_id}_{amount}_{encoded_login}"
                )
            ]
        ]
        paid_reply_markup = InlineKeyboardMarkup(paid_keyboard)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        await query.edit_message_text(
            text=f"{query.message.text}\n\n‚úÖ <b>–°–¢–ê–¢–£–°: –ó–ê–ö–ê–ó –ü–†–ò–ù–Ø–¢</b>\nüí° –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞",
            parse_mode='HTML',
            reply_markup=paid_reply_markup
        )
        
        logger.info(f"–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–ª–æ–≥–∏–Ω: {login})")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await query.edit_message_text(
            text=f"{query.message.text}\n\n‚ùå <b>–û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞</b>",
            parse_mode='HTML'
        )


async def handle_paid_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–ø–ª–∞—á–µ–Ω–æ'"""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        parts = query.data.split('_')
        if len(parts) >= 5:
            _, user_id, chat_id, amount, encoded_login = parts[0], parts[1], parts[2], parts[3], parts[4]
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω
            try:
                login = base64.b64decode(encoded_login.encode()).decode()
            except:
                login = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –ª–æ–≥–∏–Ω–∞
            _, user_id, chat_id, amount = query.data.split('_', 3)
            login = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        completion_message = (
            f"üéâ <b>–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
            f"üë§ –õ–æ–≥–∏–Ω: <code>{login}</code>\n"
            f"üí≥ –û–ø–ª–∞—á–µ–Ω–æ: {amount} –†–£–ë\n\n"
            f"‚úÖ <b>–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n"
            f"üí° –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!\n"
            f"‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        
        await context.bot.send_message(
            chat_id=int(chat_id),
            text=completion_message,
            parse_mode='HTML'
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ (—É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏)
        await query.edit_message_text(
            text=f"{query.message.text}\n\nüí∞ <b>–°–¢–ê–¢–£–°: –û–ü–õ–ê–ß–ï–ù–û –ò –í–´–ü–û–õ–ù–ï–ù–û</b>",
            parse_mode='HTML'
        )
        
        logger.info(f"–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–ª–æ–≥–∏–Ω: {login})")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await query.edit_message_text(
            text=f"{query.message.text}\n\n‚ùå <b>–û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞</b>",
            parse_mode='HTML'
        )





async def handle_reject_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–∫–ª–æ–Ω–∏—Ç—å'"""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        parts = query.data.split('_')
        if len(parts) >= 5:
            _, user_id, chat_id, amount, encoded_login = parts[0], parts[1], parts[2], parts[3], parts[4]
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω
            try:
                login = base64.b64decode(encoded_login.encode()).decode()
            except:
                login = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –ª–æ–≥–∏–Ω–∞
            _, user_id, chat_id, amount = query.data.split('_', 3)
            login = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        reject_message = (
            f"‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n"
            f"üë§ –õ–æ–≥–∏–Ω: <code>{login}</code>\n"
            f"üí≥ –°—É–º–º–∞: {amount} –†–£–ë\n\n"
            f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω.\n"
            f"üìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
            f"üîÑ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ /start"
        )
        
        await context.bot.send_message(
            chat_id=int(chat_id),
            text=reject_message,
            parse_mode='HTML'
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        await query.edit_message_text(
            text=f"{query.message.text}\n\n‚ùå <b>–°–¢–ê–¢–£–°: –ó–ê–ö–ê–ó –û–¢–ö–õ–û–ù–ï–ù</b>",
            parse_mode='HTML'
        )
        
        logger.info(f"–ó–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–ª–æ–≥–∏–Ω: {login}) –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await query.edit_message_text(
            text=f"{query.message.text}\n\n‚ùå <b>–û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞</b>",
            parse_mode='HTML'
        )


async def handle_unknown_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await update.message.reply_text(
        "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
    )




async def main_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ Crypto Top-Up Bot...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("cancel", cancel_command))
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CommandHandler("setrate", set_rate_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebApp –¥–∞–Ω–Ω—ã—Ö
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏
    application.add_handler(CallbackQueryHandler(handle_accept_callback, pattern="^accept_"))
    application.add_handler(CallbackQueryHandler(handle_paid_callback, pattern="^paid_"))
    application.add_handler(CallbackQueryHandler(handle_reject_callback, pattern="^reject_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_unknown_message))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å USDT: 1 USDT = {current_usdt_rate} –†–£–ë")
    logger.info(f"–ö–æ–º–∏—Å—Å–∏—è: {COMMISSION_PERCENT}%")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    async with application:
        await application.start()
        await application.updater.start_polling(allowed_updates=Update.ALL_TYPES)
        
        try:
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        await application.updater.stop()
        await application.stop()

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        asyncio.run(main_async())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise


if __name__ == '__main__':
    main()
